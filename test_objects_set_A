hub_objects_collections: [
  {'namespace': 'community', 'name': 'general', 'filename': 'community-general-8.2.0.tar.gz'},

  {'namespace': 'infra', 'name': 'ah_configuration', 'filename': 'infra-ah_configuration-2.1.0.tar.gz'},

  {'namespace': 'configify', 'name': 'aapconfig', 'filename': 'configify-aapconfig-{{ version }}.tar.gz'}
] # type: ignore

hub_objects_remotes: [
  {'name': 'rh-certified', 'url': 'https://console.redhat.com/api/automation-hub/content/published/',
   'auth_url': 'https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token', 'token': '{{ rhhub_pat }}',
   'requirements': {'collections': [{'name': 'ansible.platform'}, {'name': 'ansible.controller'}]}},

  {'name': 'community', 'url': 'https://galaxy.ansible.com/api/',
   'auth_url': '', 'token': '', 'requirements': ''},

  {'name': 'rh-certified-aws', 'url': 'https://console.redhat.com/api/automation-hub/content/published/',
   'auth_url': 'https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token', 'token': '{{ rhhub_pat }}',
   'requirements': {'collections': [{'name': 'amazon.aws'}]}},
] # type: ignore

controller_settings_authentication: {
        'AUTHENTICATION_BACKENDS': [
            'awx.sso.backends.LDAPBackend',
            'awx.sso.backends.LDAPBackend1',
            'awx.sso.backends.TACACSPlusBackend',
            'awx.main.backends.AWXModelBackend'
        ]
} # type: ignore

controller_settings_jobs: {
        'AWX_ISOLATION_SHOW_PATHS': [],
        'GALAXY_IGNORE_CERTS': true
} # type: ignore

controller_settings_ldap: {
        'AUTH_LDAP_1_BIND_DN': 'CN=user,CN=users,DC=examplec,DC=com',
        'AUTH_LDAP_1_BIND_PASSWORD': '$encrypted$',
        'AUTH_LDAP_1_DENY_GROUP': 'CN=user,OU=Users,DC=examplec,DC=com',
        'AUTH_LDAP_1_GROUP_SEARCH': [
            'DC=examplec,DC=com',
            'SCOPE_SUBTREE',
            '(objectClass=group)'
        ],
        'AUTH_LDAP_1_ORGANIZATION_MAP': {
            'Org C': {
                'users': [
                    'CN=user,OU=Users,DC=examplec,DC=com'
                ]
            }
        },
        'AUTH_LDAP_1_REQUIRE_GROUP': 'CN=user,OU=Users,DC=examplec,DC=com',
        'AUTH_LDAP_1_SERVER_URI': 'ldap://examplec',
        'AUTH_LDAP_1_START_TLS': true,
        'AUTH_LDAP_1_TEAM_MAP': {
            'Team C': {
                'organization': 'Org C',
                'remove': true,
                'users': [
                    'CN=user,OU=Users,DC=examplea,DC=com'
                ]
            }
        },
        'AUTH_LDAP_1_USER_ATTR_MAP': {
            'email': 'mail',
            'first_name': 'givenName',
            'last_name': 'sn'
        },
        'AUTH_LDAP_1_USER_DN_TEMPLATE': 'uid=%(user)s,OU=Users,DC=com',
        'AUTH_LDAP_1_USER_FLAGS_BY_GROUP': {
            'is_superuser': [
                'CN=user,OU=Users,DC=example1,DC=com'
            ]
        },
        'AUTH_LDAP_1_USER_SEARCH': [
            'OU=Users,DC=examplec,DC=com',
            'SCOPE_SUBTREE',
            '(sAMAccountName=%(user)s)'
        ],
        'AUTH_LDAP_ORGANIZATION_MAP': {
            'Org A': {
                'admins': [
                    'CN=orgaadm,OU=Users,DC=example,DC=com'
                ],
                'remove_admins': true,
                'remove_users': true,
                'users': [
                    'CN=orga,OU=Users,DC=example,DC=com'
                ]
            },
            'Org C': {
                'admins': [],
                'users': [
                    'CN=orgc,OU=Users,DC=example,DC=com',
                    'CN=orgc2,OU=Users,DC=example,DC=com'
                ]
            }
        },
        'AUTH_LDAP_SERVER_URI': 'ldap://examplea',
        'AUTH_LDAP_TEAM_MAP': {
            'Team A': {
                'organization': 'Org A',
                'remove': true,
                'users': [
                    'CN=teama,OU=Users,DC=example,DC=com'
                ]
            },
            'Team C': {
                'organization': 'Org C',
                'users': [
                    'CN=teama,OU=Users,DC=example,DC=com',
                    'CN=teama2,OU=Users,DC=example,DC=com'
                ]
            }
        }
} # type: ignore

controller_authentication: [
        {
            'configuration': {
                'CONNECTION_OPTIONS': {},
                'GROUP_TYPE': 'MemberDNGroupType',
                'GROUP_TYPE_PARAMS': {
                    'member_attr': 'member',
                    'name_attr': 'cn'
                },
                'SERVER_URI': [
                    'ldap://examplea'
                ],
                'START_TLS': false,
                'USER_ATTR_MAP': {
                    'email': 'mail',
                    'first_name': 'givenName',
                    'last_name': 'sn'
                }
            },
            'enabled': true,
            'name': 'Auth_LDAP',
            'type': 'ansible_base.authentication.authenticator_plugins.ldap'
        },
        {
            'configuration': {
                'BIND_DN': 'CN=user,CN=users,DC=examplec,DC=com',
                'BIND_PASSWORD': '$encrypted$',
                'CONNECTION_OPTIONS': {},
                'GROUP_SEARCH': [
                    'DC=examplec,DC=com',
                    'SCOPE_SUBTREE',
                    '(objectClass=group)'
                ],
                'GROUP_TYPE': 'MemberDNGroupType',
                'GROUP_TYPE_PARAMS': {
                    'member_attr': 'member',
                    'name_attr': 'cn'
                },
                'SERVER_URI': [
                    'ldap://examplec'
                ],
                'START_TLS': true,
                'USER_ATTR_MAP': {
                    'email': 'mail',
                    'first_name': 'givenName',
                    'last_name': 'sn'
                },
                'USER_DN_TEMPLATE': 'uid=%(user)s,OU=Users,DC=com',
                'USER_SEARCH': [
                    'OU=Users,DC=examplec,DC=com',
                    'SCOPE_SUBTREE',
                    '(sAMAccountName=%(user)s)'
                ]
            },
            'enabled': true,
            'name': 'Auth_LDAP_1',
            'type': 'ansible_base.authentication.authenticator_plugins.ldap'
        }
] # type: ignore

controller_authenticator_maps: [
  {'name': 'Auth_LDAP_team_Team A_map', 'authenticator': 'Auth_LDAP', 'order': 0,
   'map_type': 'team', 'role': 'Team Member', 'organization': 'Org A', 'team': 'Team A', 'revoke': True,
   'triggers': {'groups': {'has_or': ['CN=teama,OU=Users,DC=example,DC=com']}}},

  {'name': 'Auth_LDAP_team_Team C_map', 'authenticator': 'Auth_LDAP', 'order': 0,
   'map_type': 'team', 'role': 'Team Member', 'organization': 'Org C', 'team': 'Team C', 'revoke': False,
   'triggers': {'groups': {'has_or': ['CN=teama,OU=Users,DC=example,DC=com', 'CN=teama2,OU=Users,DC=example,DC=com']}}},

  {'name': 'Auth_LDAP_org_Org A_user_map', 'authenticator': 'Auth_LDAP', 'order': 0,
   'map_type': 'organization', 'role': 'Organization Member', 'organization': 'Org A', 'team': '', 'revoke': True,
   'triggers': {'groups': {'has_or': ['CN=orga,OU=Users,DC=example,DC=com']}}},

  {'name': 'Auth_LDAP_org_Org A_admin_map', 'authenticator': 'Auth_LDAP', 'order': 0,
   'map_type': 'organization', 'role': 'Organization Admin', 'organization': 'Org A', 'team': '', 'revoke': True,
   'triggers': {'groups': {'has_or': ['CN=orgaadm,OU=Users,DC=example,DC=com']}}},

  {'name': 'Auth_LDAP_org_Org C_user_map', 'authenticator': 'Auth_LDAP', 'order': 0,
   'map_type': 'organization', 'role': 'Organization Member', 'organization': 'Org C', 'team': '', 'revoke': False,
   'triggers': {'groups': {'has_or': ['CN=orgc,OU=Users,DC=example,DC=com', 'CN=orgc2,OU=Users,DC=example,DC=com']}}},

  {'name': 'Auth_LDAP_1_team_Team C_map', 'authenticator': 'Auth_LDAP_1', 'order': 0,
   'map_type': 'team', 'role': 'Team Member', 'organization': 'Org C', 'team': 'Team C', 'revoke': True,
   'triggers': {'groups': {'has_or': ['CN=user,OU=Users,DC=examplea,DC=com']}}},

  {'name': 'Auth_LDAP_1_org_Org C_user_map', 'authenticator': 'Auth_LDAP_1', 'order': 0,
   'map_type': 'organization', 'role': 'Organization Member', 'organization': 'Org C', 'team': '', 'revoke': False,
   'triggers': {'groups': {'has_or': ['CN=user,OU=Users,DC=examplec,DC=com']}}}
] # type: ignore

controller_objects_users: [
  {'username': 'UserA', 'first_name': 'aaa', 'last_name': '', 'email': 'usera@example.com',
   'superuser': False, 'auditor': False, 'pass': '$encrypted$'},

  {'username': 'UserA_Superuser', 'first_name': 'aaasss', 'last_name': '', 'email': 'usera@example.com',
   'superuser': True, 'auditor': False, 'pass': '$encrypted$'},

  {'username': 'UserC', 'first_name': 'ccc', 'last_name': '', 'email': '',
   'superuser': False, 'auditor': False, 'pass': '$encrypted$'},

  {'username': 'UserA_Auditor', 'first_name': 'cccaaa', 'last_name': '', 'email': '',
   'superuser': False, 'auditor': True, 'pass': '$encrypted$'},

  {'username': 'userde', 'first_name': '', 'last_name': '', 'email': '',
   'superuser': False, 'auditor': False, 'pass': '$encrypted$'},

  {'username': 'hubsync', 'first_name': '', 'last_name': '', 'email': '',
   'superuser': False, 'auditor': False, 'pass': '{{ lookup("ansible.builtin.env", "AH_PASSWORD") }}'}
] # type: ignore

controller_objects_execution_environments: [
  {'name': 'Execution Environment A', 'descr': '',
   'image': '{{ hostname_hub[aap_version] }}/ee-minimal-rhel8:latest', 'pull': 'missing'},

  {'name': 'Automation Hub Minimal execution environment', 'descr': '',
   'image': '{{ hostname_hub[aap_version] }}/ee-minimal-rhel8:latest', 'pull': 'missing'},

  {'name': 'Automation Hub Default execution environment', 'descr': '',
   'image': '{{ hostname_hub[aap_version] }}/ee-supported-rhel8:latest', 'pull': 'missing'}
] # type: ignore

controller_objects_instance_groups: [
  {'name': 'Auto IG A', 'minimum': 1, 'percentage': 100, 'instances': []},

  {'name': 'Auto IG C', 'minimum': 1, 'percentage': 100, 'instances': []},

  {'name': 'Static IG A', 'minimum': 1, 'percentage': 0, 'instances': ['{{ hostname_controller[aap_version] }}']},

  {'name': 'Static IG C', 'minimum': 1, 'percentage': 0, 'instances': []}
] # type: ignore

controller_objects_credential_types: [
  {'name': 'Credential Type A', 'descr': '',
   'inputs': {'fields': [{'id': 'usernameA', 'type': 'string', 'label': 'Username'},
                         {'id': 'passwordA', 'type': 'string', 'label': 'Password'}]},
   'injectors': {'extra_vars': {'configifyadpass': !unsafe '{{ passwordA }}',
                                'configifyaduser': !unsafe '{{ usernameA }}'}}},

  {'name': 'Credential Type C', 'descr': '',
   'inputs': {'fields': [{'id': 'usernameC', 'type': 'string', 'label': 'Username'},
                         {'id': 'passwordC', 'type': 'string', 'label': 'Password'}]},
   'injectors': {'extra_vars': {'configifyadpass': !unsafe '{{ passwordC }}',
                                'configifyaduser': !unsafe '{{ usernameC }}'}}},

  {'name': 'Credential Type Z (hub)', 'descr': '',
   'inputs': {'fields': [{'id': 'hub_host', 'type': 'string', 'label': 'Hub host'},
                         {'id': 'hub_user', 'type': 'string', 'label': 'Hub user'},
                         {'id': 'hub_pass', 'type': 'string', 'label': 'Hub password', 'secret': true},
                         {'id': 'hub_ssl_verify', 'type': 'boolean', 'label': 'Verify SSL'}]},
   'injectors': {'env': {'AH_HOST': !unsafe '{{ hub_host }}',
                         'AH_USERNAME': !unsafe '{{ hub_user }}',
                         'AH_PASSWORD': !unsafe '{{ hub_pass }}',
                         'AH_VERIFY_SSL': !unsafe '{{ hub_ssl_verify }}'}}},

  {'name': 'Credential Type Z (gw)', 'descr': '',
   'inputs': {'fields': [{'id': 'gw_host', 'type': 'string', 'label': 'Gateway host'},
                         {'id': 'gw_pat', 'type': 'string', 'label': 'Gateway token', 'secret': true},
                         {'id': 'gw_ssl_verify', 'type': 'boolean', 'label': 'Verify SSL'}]},
   'injectors': {'env': {'GATEWAY_HOSTNAME': !unsafe '{{ gw_host }}',
                         'GATEWAY_API_TOKEN': !unsafe '{{ gw_pat }}',
                         'GATEWAY_VERIFY_SSL': !unsafe '{{ gw_ssl_verify }}'}}},

  {'name': 'Credential Type Z (api endpoint)', 'descr': '',
   'inputs': {'fields': [{'id': 'api_prefix', 'type': 'string', 'label': 'API prefix'}]},
   'injectors': {'env': {'CONTROLLER_OPTIONAL_API_URLPATTERN_PREFIX': !unsafe '{{ api_prefix }}'}}}
] # type: ignore

controller_objects_credentials: [
  {'name': 'Credential A', 'org': 'Default', 'descr': '', 'type': 'Ansible Galaxy/Automation Hub API Token',
   'inputs': {'url': 'https://examplea', 'token': 'HIDDEN', 'auth_url': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential C', 'org': 'Default', 'descr': '', 'type': 'Ansible Galaxy/Automation Hub API Token',
   'inputs': {'url': 'https://examplec', 'token': 'HIDDEN', 'auth_url': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Custom A', 'org': 'Default', 'descr': '', 'type': 'Credential Type A',
   'inputs': {'passwordA': 'HIDDEN', 'usernameA': 'UsernameA'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Custom C', 'org': 'Default', 'descr': '', 'type': 'Credential Type C',
   'inputs': {'passwordC': 'HIDDEN', 'usernameC': 'UsernameC'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential GitHub A', 'org': 'Org A', 'descr': '', 'type': 'Source Control',
   'inputs': {'password': '{{ github_pat }}', 'username': 'kk-at-redhat'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential GitHub C', 'org': 'Org C', 'descr': '', 'type': 'Source Control',
   'inputs': {'password': '{{ github_pat }}', 'username': 'kk-at-redhat'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Machine A', 'org': 'Org A', 'descr': '', 'type': 'Machine',
   'inputs': {'password': 'HIDDEN', 'username': 'aaa', 'become_method': '', 'become_username': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Machine C', 'org': 'Org C', 'descr': '', 'type': 'Machine',
   'inputs': {'password': 'HIDDEN', 'username': 'ccc', 'become_method': '', 'become_username': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential GitHub D1', 'org': 'Org D', 'descr': '', 'type': 'Source Control',
   'inputs': {'password': '{{ github_pat }}', 'username': 'kk-at-redhat'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential GitHub E1', 'org': 'Org E', 'descr': '', 'type': 'Source Control',
   'inputs': {'password': '{{ github_pat }}', 'username': 'kk-at-redhat'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Personal A', 'org': '', 'descr': '', 'type': 'Machine',
   'inputs': {'password': 'HIDDEN', 'username': 'aaa', 'become_method': '', 'become_username': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Personal C', 'org': '', 'descr': '', 'type': 'Machine',
   'inputs': {'password': 'HIDDEN', 'username': 'ccc', 'become_method': '', 'become_username': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (controller)', 'org': 'Org Z', 'descr': '', 'type': 'Red Hat Ansible Automation Platform',
   'inputs': {'host': '{{ lookup("ansible.builtin.env", "CONTROLLER_HOST") }}',
              'username': '',
              'verify_ssl': '{{ lookup("ansible.builtin.env", "CONTROLLER_VERIFY_SSL") | bool }}',
              'oauth_token': '{{ lookup("ansible.builtin.env", "CONTROLLER_OAUTH_TOKEN") }}'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (hub)', 'org': 'Org Z', 'descr': '', 'type': 'Credential Type Z (hub)',
   'inputs': {'hub_host': '{{ lookup("ansible.builtin.env", "AH_HOST") }}',
              'hub_user': '{{ lookup("ansible.builtin.env", "AH_USERNAME") }}',
              'hub_pass': '{{ lookup("ansible.builtin.env", "AH_PASSWORD") }}',
              'hub_ssl_verify': '{{ lookup("ansible.builtin.env", "AH_VERIFY_SSL") | bool }}'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (gw)', 'org': 'Org Z', 'descr': '', 'type': 'Credential Type Z (gw)',
   'inputs': {'gw_host': '{{ lookup("ansible.builtin.env", "GATEWAY_HOSTNAME") }}',
              'gw_pat': '{{ lookup("ansible.builtin.env", "GATEWAY_API_TOKEN") }}',
              'gw_ssl_verify': '{{ lookup("ansible.builtin.env", "GATEWAY_VERIFY_SSL") | bool }}'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (hub sync certified)', 'org': 'Org Z', 'descr': '', 'type': 'Ansible Galaxy/Automation Hub API Token',
   'inputs': {'url': 'https://{{ hub_endpoint[aap_version] }}/api/galaxy/content/rh-certified/', 'token': '{{ hub_pat[aap_version] }}', 'auth_url': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (hub sync published)', 'org': 'Org Z', 'descr': '', 'type': 'Ansible Galaxy/Automation Hub API Token',
   'inputs': {'url': 'https://{{ hub_endpoint[aap_version] }}/api/galaxy/', 'token': '{{ hub_pat[aap_version] }}', 'auth_url': ''},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (vault)', 'org': 'Org Z', 'descr': '', 'type': 'Vault',
   'inputs': {'vault_id': '', 'vault_password': '{{ lookup("ansible.builtin.env", "AH_PASSWORD") }}'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''},

  {'name': 'Credential Z (api endpoint)', 'org': 'Org Z', 'descr': '', 'type': 'Credential Type Z (api endpoint)',
   'inputs': {'api_prefix': '{{ api_prefix[aap_version] }}'},
   'src_input_field_name': '', 'src_credential': '', 'src_metadata': ''}
] # type: ignore

controller_objects_organizations: [
  {'name': 'Org A', 'descr': '', 'creds': ['Credential A']},
  {'name': 'Org C', 'descr': '', 'creds': ['Credential C']},
  {'name': 'Org D', 'descr': '', 'creds': []},
  {'name': 'Org E', 'descr': '', 'creds': []},
  {'name': 'Org Z', 'descr': '', 'creds': ['Credential Z (hub sync published)', 'Credential Z (hub sync certified)', 'Ansible Galaxy']}
] # type: ignore

controller_objects_notification_profiles: [
  {'name': 'Notification Email A', 'descr': '', 'notification_type': 'email',
   'notification_config': {'host': 'examplea.com', 'port': 25, 'sender': 'a@examplea.com', 'timeout': 30, 'use_ssl': False, 'use_tls': False, 'password': '', 'username': '', 'recipients': ['aaa@examplea.com']},
   'org': 'Org A',
   'messages': {'error': {'body': !unsafe ' #{{ job.id }} had status {{ job.status }}, view details at {{ url }}\n\n{{ job_metadata }}',
                          'message': !unsafe ' #{{ job.id }} "{{ job.name }}" {{ job.status }}: {{ url }}'},
                'started': {'body': !unsafe '#{{ job.id }} had status {{ job.status }}, view details at {{ url }}\n\n{{ job_metadata }}',
                            'message': !unsafe '"{{ job.name }}" {{ job.status }}: {{ url }}'},
                'success': {'body': !unsafe ' #{{ job.id }} had status {{ job.status }}, view details at {{ url }}\n\n{{ job_metadata }}',
                            'message': !unsafe '#{{ job.id }} "{{ job.name }}" {{ job.status }}: {{ url }}'}}},

  {'name': 'Notification Hook C', 'descr': '', 'notification_type': 'webhook',
   'notification_config': {'url': 'https://examplec.com', 'headers': {}, 'password': '', 'username': '', 'http_method': 'POST', 'disable_ssl_verification': False},
   'org': 'Org C',
   'messages': {}},

  {'name': 'Notification Slack A', 'descr': '', 'notification_type': 'slack',
   'notification_config': {'token': '$encrypted$', 'channels': ['aaa'], 'hex_color': ''},
   'org': 'Org A',
   'messages': {}},

  {'name': 'Notification Slack D1', 'descr': '', 'notification_type': 'slack',
   'notification_config': {'token': '$encrypted$', 'channels': ['aaa'], 'hex_color': ''},
   'org': 'Org D',
   'messages': {}},

  {'name': 'Notification Slack E1', 'descr': '', 'notification_type': 'slack',
   'notification_config': {'token': '$encrypted$', 'channels': ['aaa'], 'hex_color': ''},
   'org': 'Org E',
   'messages': {}}
] # type: ignore

controller_objects_teams: [
  {'name': 'Team A', 'descr': '', 'org': 'Org A'},
  {'name': 'Team C', 'descr': '', 'org': 'Org C'},
  {'name': 'Team D1', 'descr': '', 'org': 'Org D'},
  {'name': 'Team E1', 'descr': '', 'org': 'Org E'}
] # type: ignore

controller_objects_projects: [
  {'name': 'Project C', 'type': 'git', 'branch': '', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org C', 'cred': '', 'url': 'https://github.com/configify/hi.git', 'ee': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []},

  {'name': 'Project with Creds C', 'type': 'git', 'branch': '', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org C', 'cred': 'Credential GitHub A', 'url': 'https://github.com/configify/hi.git', 'ee': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []},

  {'name': 'Project A', 'type': 'git', 'branch': '', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org A', 'cred': '', 'url': 'https://github.com/configify/hi.git', 'ee': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []},

  {'name': 'Project D1', 'type': 'git', 'branch': '', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org D', 'cred': 'Credential GitHub D1', 'url': 'https://github.com/configify/hi.git', 'ee': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []},

  {'name': 'Project E1', 'type': 'git', 'branch': '', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org E', 'cred': 'Credential GitHub E1', 'url': 'https://github.com/configify/hi.git', 'ee': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []},

  {'name': 'Project with Creds A', 'type': 'git', 'branch': '', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org A', 'cred': 'Credential GitHub A', 'url': 'https://github.com/configify/hi.git', 'ee': 'Execution Environment A',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []},

  {'name': 'Project Z', 'type': 'git', 'branch': 'aap_testing', 'clean_on_update': False, 'delete_on_update': False, 'update_on_launch': False,
   'allow_override': False, 'org': 'Org Z', 'cred': '', 'url': 'https://github.com/configify/aapconfig_testing.git', 'ee': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []}
] # type: ignore

controller_objects_inventories_smart: [
  {'name': 'Smart A', 'description': '', 'org': 'Org A', 'variables': {},
   'host_filter': 'name__icontains=B'},

  {'name': 'Smart D1', 'description': '', 'org': 'Org D', 'variables': {},
   'host_filter': 'name__icontains=D'},

  {'name': 'Smart E1', 'description': '', 'org': 'Org E', 'variables': {},
   'host_filter': 'name__icontains=E'}
] # type: ignore

controller_objects_inventories_constructed: [
  {'name': 'Inventory Constructed A', 'description': '', 'org': 'Org A',
   'input': ['Inventory Static A'],
   'host_filter': '',
   'source_vars': {'plugin': 'constructed', 'strict': True}, 'limit': 'Group A2', 'source': ''},

  {'name': 'Inventory Constructed C', 'description': '', 'org': 'Org C',
   'input': ['Inventory Static C'],
   'host_filter': '',
   'source_vars': {'plugin': 'constructed', 'strict': True}, 'limit': '*1', 'source': ''},

  {'name': 'Inventory Constructed D1', 'description': '', 'org': 'Org D',
   'input': ['Inventory Static D1'],
   'host_filter': '',
   'source_vars': {'plugin': 'constructed', 'strict': True}, 'limit': '*1', 'source': ''},

  {'name': 'Inventory Constructed E1', 'description': '', 'org': 'Org E',
   'input': ['Inventory Static E1'],
   'host_filter': '',
   'source_vars': {'plugin': 'constructed', 'strict': True}, 'limit': '*1', 'source': ''}
] # type: ignore

controller_objects_inventories_dynamic: [
  {'name': 'Inventory Dynamic A', 'description': '', 'org': 'Org A',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'sources': [{'name': 'Inventory Source A', 'description': '', 'enabled_value': '', 'enabled_var': '',
                'host_filter': '', 'overwrite': False, 'overwrite_vars': False, 'project': 'Project with Creds A', 'source': 'scm',
                'source_path': '', 'extra_vars': {}, 'timeout': 0, 'update_cache_timeout': 0, 'update_on_launch': False, 'verbosity': 1}]},

  {'name': 'Inventory Dynamic C', 'description': '', 'org': 'Org C',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'sources': [{'name': 'Inventory Source C', 'description': '', 'enabled_value': '', 'enabled_var': '',
                'host_filter': '', 'overwrite': False, 'overwrite_vars': False, 'project': 'Project with Creds C', 'source': 'scm',
                'source_path': '', 'extra_vars': {}, 'timeout': 0, 'update_cache_timeout': 0, 'update_on_launch': False, 'verbosity': 1}]},

  {'name': 'Inventory Dynamic D1', 'description': '', 'org': 'Org D',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'sources': [{'name': 'Inventory Source D1', 'description': '', 'enabled_value': '', 'enabled_var': '',
                'host_filter': '', 'overwrite': False, 'overwrite_vars': False, 'project': 'Project D1', 'source': 'scm',
                'source_path': '', 'extra_vars': {}, 'timeout': 0, 'update_cache_timeout': 0, 'update_on_launch': False, 'verbosity': 1}]},

  {'name': 'Inventory Dynamic E1', 'description': '', 'org': 'Org E',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'sources': [{'name': 'Inventory Source E1', 'description': '', 'enabled_value': '', 'enabled_var': '',
                'host_filter': '', 'overwrite': False, 'overwrite_vars': False, 'project': 'Project E1', 'source': 'scm',
                'source_path': '', 'extra_vars': {}, 'timeout': 0, 'update_cache_timeout': 0, 'update_on_launch': False, 'verbosity': 1}]}
] # type: ignore

controller_objects_inventories_static: [
  {'name': 'Inventory Static A', 'description': '', 'org': 'Org A',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'hosts': [],
   'groups': [{'name': 'Group A1', 'description': '', 'variables': {},
               'subgroups': ['Group A2'],
               'hosts': []},
              {'name': 'Group A2', 'description': '', 'variables': {},
               'subgroups': [],
               'hosts': [{'name': 'Host A', 'description': '', 'variables': {}}]}]},

  {'name': 'Inventory Static C', 'description': '', 'org': 'Org C',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'hosts': [{'name': 'Host C2', 'description': '', 'variables': {}}],
   'groups': [{'name': 'Group C1', 'description': '', 'variables': {},
               'subgroups': ['Group C2'],
               'hosts': []},
              {'name': 'Group C2', 'description': '', 'variables': {},
               'subgroups': [],
               'hosts': [{'name': 'Host C1', 'description': '', 'variables': {}}]}]},

  {'name': 'Inventory Static D1', 'description': '', 'org': 'Org D',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'hosts': [{'name': 'Host D11', 'description': '', 'variables': {}}],
   'groups': [{'name': 'Group D11', 'description': '', 'variables': {},
               'subgroups': ['Group D12'],
               'hosts': []},
              {'name': 'Group D12', 'description': '', 'variables': {},
               'subgroups': [],
               'hosts': [{'name': 'Host D12', 'description': '', 'variables': {}}]}]},

  {'name': 'Inventory Static E1', 'description': '', 'org': 'Org E',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'hosts': [{'name': 'Host E11', 'description': '', 'variables': {}}],
   'groups': [{'name': 'Group E11', 'description': '', 'variables': {},
               'subgroups': ['Group E12'],
               'hosts': []},
              {'name': 'Group E12', 'description': '', 'variables': {},
               'subgroups': [],
               'hosts': [{'name': 'Host E12', 'description': '', 'variables': {}}]}]},

  {'name': 'Inventory Static Z', 'description': '', 'org': 'Org Z',
   'host_filter': '', 'prevent_fallback': False, 'variables': {},
   'hosts': [],
   'groups': []}
] # type: ignore

controller_objects_templates: [
  {'name': 'Template A', 'description': '', 'playbook': 'hi.yml', 'execution_environment': '', 'project': 'Project with Creds A',
   'allow_simultaneous': False, 'ask_credential_on_launch': False, 'ask_diff_mode_on_launch': False,
   'ask_execution_environment_on_launch': False, 'ask_forks_on_launch': False, 'ask_instance_groups_on_launch': False,
   'ask_inventory_on_launch': False, 'ask_job_slice_count_on_launch': False, 'ask_job_type_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False, 'ask_timeout_on_launch': False,
   'ask_variables_on_launch': False, 'ask_verbosity_on_launch': False, 'become_enabled': False, 'diff_mode': False, 'force_handlers': False, 'forks': 0,
   'host_config_key': '', 'inventory': 'Inventory Dynamic A', 'job_slice_count': 1, 'job_tags': '', 'job_type': 'run', 'limit': '',
   'prevent_instance_group_fallback': False, 'scm_branch': '', 'skip_tags': '', 'start_at_task': '', 'survey_enabled': False, 'timeout': 0,
   'use_fact_cache': False, 'verbosity': 0,
   'survey': {}, 'extra_vars': {},
   'webhook_service': '', 'webhook_credential': '', 'creds': ['Credential Machine A'],
   'notifications_on_start': ['Notification Email A', 'Notification Slack A'], 'notifications_on_success': [], 'notifications_on_failure': ['Notification Slack A']},

  {'name': 'Template C', 'description': '', 'playbook': 'hi.yml', 'execution_environment': 'Execution Environment A', 'project': 'Project with Creds C',
   'allow_simultaneous': False, 'ask_credential_on_launch': False, 'ask_diff_mode_on_launch': False,
   'ask_execution_environment_on_launch': False, 'ask_forks_on_launch': False, 'ask_instance_groups_on_launch': False,
   'ask_inventory_on_launch': False, 'ask_job_slice_count_on_launch': False, 'ask_job_type_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False, 'ask_timeout_on_launch': False,
   'ask_variables_on_launch': False, 'ask_verbosity_on_launch': False, 'become_enabled': False, 'diff_mode': False, 'force_handlers': False, 'forks': 0,
   'host_config_key': '', 'inventory': 'Inventory Dynamic C', 'job_slice_count': 1, 'job_tags': '', 'job_type': 'run', 'limit': '',
   'prevent_instance_group_fallback': False, 'scm_branch': '', 'skip_tags': '', 'start_at_task': '', 'survey_enabled': False, 'timeout': 0,
   'use_fact_cache': False, 'verbosity': 0,
   'survey': {'name': '', 'spec': [{'max': 1024, 'min': 0, 'type': 'text', 'choices': '', 'default': '', 'required': True, 'variable': 'template_c_variable_1', 'new_question': True, 'question_name': 'template_c_variable_1', 'question_description': ''}],
              'description': ''},
   'extra_vars': {},
   'webhook_service': '', 'webhook_credential': '', 'creds': ['Credential Machine C'],
   'notifications_on_start': ['Notification Hook C'], 'notifications_on_success': ['Notification Hook C'], 'notifications_on_failure': ['Notification Hook C']},

  {'name': 'Template D1', 'description': '', 'playbook': 'hi.yml', 'execution_environment': '', 'project': 'Project D1',
   'allow_simultaneous': False, 'ask_credential_on_launch': False, 'ask_diff_mode_on_launch': False,
   'ask_execution_environment_on_launch': False, 'ask_forks_on_launch': False, 'ask_instance_groups_on_launch': False,
   'ask_inventory_on_launch': False, 'ask_job_slice_count_on_launch': False, 'ask_job_type_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False, 'ask_timeout_on_launch': False,
   'ask_variables_on_launch': False, 'ask_verbosity_on_launch': False, 'become_enabled': False, 'diff_mode': False, 'force_handlers': False, 'forks': 0,
   'host_config_key': '', 'inventory': 'Inventory Dynamic D1', 'job_slice_count': 1, 'job_tags': '', 'job_type': 'run', 'limit': '',
   'prevent_instance_group_fallback': False, 'scm_branch': '', 'skip_tags': '', 'start_at_task': '', 'survey_enabled': False, 'timeout': 0,
   'use_fact_cache': False, 'verbosity': 0,
   'survey': {}, 'extra_vars': {},
   'webhook_service': '', 'webhook_credential': '', 'creds': [],
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': ['Notification Slack D1']},

  {'name': 'Template E1', 'description': '', 'playbook': 'hi.yml', 'execution_environment': '', 'project': 'Project E1',
   'allow_simultaneous': False, 'ask_credential_on_launch': False, 'ask_diff_mode_on_launch': False,
   'ask_execution_environment_on_launch': False, 'ask_forks_on_launch': False, 'ask_instance_groups_on_launch': False,
   'ask_inventory_on_launch': False, 'ask_job_slice_count_on_launch': False, 'ask_job_type_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False, 'ask_timeout_on_launch': False,
   'ask_variables_on_launch': False, 'ask_verbosity_on_launch': False, 'become_enabled': False, 'diff_mode': False, 'force_handlers': False, 'forks': 0,
   'host_config_key': '', 'inventory': 'Inventory Dynamic E1', 'job_slice_count': 1, 'job_tags': '', 'job_type': 'run', 'limit': '',
   'prevent_instance_group_fallback': False, 'scm_branch': '', 'skip_tags': '', 'start_at_task': '', 'survey_enabled': False, 'timeout': 0,
   'use_fact_cache': False, 'verbosity': 0,
   'survey': {}, 'extra_vars': {},
   'webhook_service': '', 'webhook_credential': '', 'creds': [],
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': ['Notification Slack E1']},

  {'name': 'Template Z', 'description': '', 'playbook': 'configure_aap.yml', 'execution_environment': '', 'project': 'Project Z',
   'allow_simultaneous': False, 'ask_credential_on_launch': False, 'ask_diff_mode_on_launch': False,
   'ask_execution_environment_on_launch': False, 'ask_forks_on_launch': False, 'ask_instance_groups_on_launch': False,
   'ask_inventory_on_launch': False, 'ask_job_slice_count_on_launch': False, 'ask_job_type_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False, 'ask_timeout_on_launch': False,
   'ask_variables_on_launch': False, 'ask_verbosity_on_launch': False, 'become_enabled': False, 'diff_mode': False, 'force_handlers': False, 'forks': 0,
   'host_config_key': '', 'inventory': 'Inventory Static Z', 'job_slice_count': 1, 'job_tags': '', 'job_type': 'run', 'limit': '',
   'prevent_instance_group_fallback': False, 'scm_branch': '', 'skip_tags': '', 'start_at_task': '', 'survey_enabled': False, 'timeout': 0,
   'use_fact_cache': False, 'verbosity': 0,
   'survey': {}, 'extra_vars': {'aap_version': '{{ aap_version }}', 'object_set': 'B', 'delete_objects': true, 'wait_project_sync': true, 'version': '{{ version }}'},
   'webhook_service': '', 'webhook_credential': '', 'creds': ['Credential Z (controller)', 'Credential Z (hub)', 'Credential Z (gw)', 'Credential Z (vault)', 'Credential Z (api endpoint)'],
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': []}
] # type: ignore

controller_objects_schedules: [
  {'name': 'Schedule A', 'descr': '', 'template': 'Template A',
   'rules': 'DTSTART;TZID=America/Toronto:20250205T200000 RRULE:INTERVAL=1;FREQ=DAILY'},

  {'name': 'Schedule D1', 'descr': '', 'template': 'Template D1',
   'rules': 'DTSTART;TZID=America/Toronto:20250205T200000 RRULE:INTERVAL=1;FREQ=DAILY'},

  {'name': 'Schedule E1', 'descr': '', 'template': 'Template E1',
   'rules': 'DTSTART;TZID=America/Toronto:20250205T200000 RRULE:INTERVAL=1;FREQ=DAILY'},

  {'name': 'Cleanup Activity Schedule', 'descr': 'Automatically Generated Schedule', 'template': 'Cleanup Activity Stream',
   'rules': 'DTSTART:20240608T043855Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=TU'},

  {'name': 'Schedule C', 'descr': '', 'template': 'Template C',
   'rules': 'DTSTART;TZID=America/Toronto:20250205T200000 RRULE:INTERVAL=1;FREQ=MONTHLY'},

  {'name': 'Cleanup Expired OAuth 2 Tokens', 'descr': 'Removes expired OAuth 2 access and refresh tokens', 'template': 'Cleanup Expired OAuth 2 Tokens',
   'rules': 'DTSTART:20240608T044013Z RRULE:FREQ=WEEKLY;INTERVAL=1'},

  {'name': 'Cleanup Expired Sessions', 'descr': 'Cleans out expired browser sessions', 'template': 'Cleanup Expired Sessions',
   'rules': 'DTSTART:20240608T044013Z RRULE:FREQ=WEEKLY;INTERVAL=1'},

  {'name': 'Cleanup Job Schedule', 'descr': 'Automatically Generated Schedule', 'template': 'Cleanup Job Details',
   'rules': 'DTSTART:20240608T043855Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SU'}
] # type: ignore

controller_objects_workflows: [
  {'name': 'Workflow A', 'descr': '', 'org': 'Org A', 'inventory': 'Inventory Static A',
   'allow_simultaneous': False,
   'ask_inventory_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False,
   'ask_variables_on_launch': False, 'extra_vars': {}, 'job_tags': '', 'limit': '', 'scm_branch': '', 'skip_tags': '', 'survey_enabled': False, 'webhook_credential': '',
   'survey': {},
   'webhook_service': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': [], 'notifications_on_approval': [],
   'nodes': [{'extra_data': {}, 'scm_branch': '', 'job_type': '', 'job_tags': '', 'skip_tags': '', 'limit': '', 'diff_mode': '', 'verbosity': '', 'forks': '', 'job_slice_count': '', 'timeout': '',
              'all_parents_must_converge': False, 'identifier': '1ca40111-f92b-435e-bff2-b33edd455941',
              'unified_job_template': {'organization': {'name': 'Org C', 'type': 'organization'}, 'name': 'Template C', 'type': 'job_template'},
              'related': {'credentials': [], 'success_nodes': [], 'failure_nodes': [], 'always_nodes': []}},
             {'extra_data': {}, 'scm_branch': '', 'job_type': '', 'job_tags': '', 'skip_tags': '', 'limit': '', 'diff_mode': '', 'verbosity': '', 'forks': '', 'job_slice_count': '', 'timeout': '',
              'all_parents_must_converge': False, 'identifier': '86e11000-e8a2-4ca6-9637-18cd29846f59',
              'unified_job_template': {'organization': {'name': 'Org A', 'type': 'organization'}, 'name': 'Template A', 'type': 'job_template'},
              'related': {'credentials': [], 'success_nodes': [{'identifier': '1ca40111-f92b-435e-bff2-b33edd455941'}], 'failure_nodes': [], 'always_nodes': []}}]},

  {'name': 'Workflow C', 'descr': '', 'org': 'Org C', 'inventory': 'Inventory Static A',
   'allow_simultaneous': False,
   'ask_inventory_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False,
   'ask_variables_on_launch': False, 'extra_vars': {}, 'job_tags': '', 'limit': '', 'scm_branch': '', 'skip_tags': '', 'survey_enabled': False, 'webhook_credential': '',
   'survey': {'name': '', 'spec': [{'max': 1024, 'min': 0, 'type': 'text', 'choices': '', 'default': '', 'required': True, 'variable': 'template_c_variable_1', 'new_question': True, 'question_name': 'template_c_variable_1', 'question_description': ''},
                                   {'max': 1024, 'min': 0, 'type': 'text', 'choices': '', 'default': '', 'required': True, 'variable': 'template_c_variable_2', 'new_question': True, 'question_name': 'template_c_variable_2', 'question_description': ''}],
              'description': ''},
   'webhook_service': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': [], 'notifications_on_approval': [],
   'nodes': [{'extra_data': {}, 'scm_branch': '', 'job_type': '', 'job_tags': '', 'skip_tags': '', 'limit': '', 'diff_mode': '', 'verbosity': '', 'forks': '', 'job_slice_count': '', 'timeout': '',
              'all_parents_must_converge': False, 'identifier': 'a6cb297e-d43f-4538-8f53-f67529d915f0',
              'unified_job_template': {'name': 'Workflow Approval A', 'type': 'workflow_approval'},
              'related': {'credentials': [], 'success_nodes': [], 'failure_nodes': [], 'always_nodes': [{'identifier': 'cebc71c8-5cc6-4e85-8897-5d876fa116c7'}],
              'create_approval_template': {'timeout': 0, 'name': 'Workflow Approval A', 'description': ''}}},
             {'extra_data': {}, 'scm_branch': '', 'job_type': '', 'job_tags': '', 'skip_tags': '', 'limit': '', 'diff_mode': '', 'verbosity': '', 'forks': '', 'job_slice_count': '', 'timeout': '',
              'all_parents_must_converge': False, 'identifier': 'cebc71c8-5cc6-4e85-8897-5d876fa116c7',
              'unified_job_template': {'name': 'Inventory Source A', 'inventory': {'organization': {'name': 'Org A', 'type': 'organization'}, 'name': 'Inventory Dynamic A', 'type': 'inventory'}, 'type': 'inventory_source'},
              'related': {'credentials': [], 'success_nodes': [], 'failure_nodes': [], 'always_nodes': [{'identifier': '10f8d476-e11a-440d-8d90-9ca8d7f511e2'}]}},
             {'extra_data': {}, 'scm_branch': '', 'job_type': '', 'job_tags': '', 'skip_tags': '', 'limit': '', 'diff_mode': '', 'verbosity': '', 'forks': '', 'job_slice_count': '', 'timeout': '',
              'all_parents_must_converge': False, 'identifier': '10f8d476-e11a-440d-8d90-9ca8d7f511e2',
              'unified_job_template': {'organization': {'name': 'Org A', 'type': 'organization'}, 'name': 'Project with Creds A', 'type': 'project'},
              'related': {'credentials': [], 'success_nodes': [], 'failure_nodes': [], 'always_nodes': [{'identifier': '2b797fc6-791d-4ee4-a1e6-7502f3aa18f0'}]}},
             {'extra_data': {}, 'scm_branch': '', 'job_type': '', 'job_tags': '', 'skip_tags': '', 'limit': '', 'diff_mode': '', 'verbosity': '', 'forks': '', 'job_slice_count': '', 'timeout': '',
              'all_parents_must_converge': False, 'identifier': '2b797fc6-791d-4ee4-a1e6-7502f3aa18f0',
              'unified_job_template': {'organization': {'name': 'Org A', 'type': 'organization'}, 'name': 'Workflow A', 'type': 'workflow_job_template'},
              'related': {'credentials': [], 'success_nodes': [], 'failure_nodes': [], 'always_nodes': []}}]},

  {'name': 'Workflow D1', 'descr': '', 'org': 'Org D', 'inventory': 'Inventory Static D1',
   'allow_simultaneous': False,
   'ask_inventory_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False,
   'ask_variables_on_launch': False, 'extra_vars': {}, 'job_tags': '', 'limit': '', 'scm_branch': '', 'skip_tags': '', 'survey_enabled': False, 'webhook_credential': '',
   'survey': {},
   'webhook_service': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': [], 'notifications_on_approval': [],
   'nodes': []},

  {'name': 'Workflow E1', 'descr': '', 'org': 'Org E', 'inventory': 'Inventory Static E1',
   'allow_simultaneous': False,
   'ask_inventory_on_launch': False,
   'ask_labels_on_launch': False, 'ask_limit_on_launch': False, 'ask_scm_branch_on_launch': False,
   'ask_skip_tags_on_launch': False, 'ask_tags_on_launch': False,
   'ask_variables_on_launch': False, 'extra_vars': {}, 'job_tags': '', 'limit': '', 'scm_branch': '', 'skip_tags': '', 'survey_enabled': False, 'webhook_credential': '',
   'survey': {},
   'webhook_service': '',
   'notifications_on_start': [], 'notifications_on_success': [], 'notifications_on_failure': [], 'notifications_on_approval': [],
   'nodes': []}
] # type: ignore
